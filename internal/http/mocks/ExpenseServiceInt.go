// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "gamelieelearn/expense-tracker-api-go/domain"

	mock "github.com/stretchr/testify/mock"
)

// ExpenseService is an autogenerated mock type for the ExpenseServiceInt type
type ExpenseService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ExpenseService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ExpenseService) GetAll(ctx context.Context) ([]domain.Expense, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Expense, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Expense); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ExpenseService) GetByID(ctx context.Context, id int64) (domain.Expense, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Expense, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Expense); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Expense)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *ExpenseService) GetByUserID(ctx context.Context, userID int64) ([]domain.Expense, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []domain.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.Expense, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Expense); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, expense
func (_m *ExpenseService) Store(ctx context.Context, expense *domain.Expense) error {
	ret := _m.Called(ctx, expense)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Expense) error); ok {
		r0 = rf(ctx, expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, expense
func (_m *ExpenseService) Update(ctx context.Context, expense *domain.Expense) error {
	ret := _m.Called(ctx, expense)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Expense) error); ok {
		r0 = rf(ctx, expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExpenseService creates a new instance of ExpenseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpenseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpenseService {
	mock := &ExpenseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
